<?php
/**
 * @file
 * Code for the header background feature.
 */

/**
 * Implements template_preprocess_node().
 */
function dt_header_background_preprocess_node(&$variables) {
  $node = $variables['node'];
  // If we have the field and if we are viewing the node's page.
  if (isset($node->field_core_header_image) && $variables['view_mode'] == 'full') {
    // Check if have a value for the field.
    $header_back = field_get_items('node', $node, 'field_core_header_image');
    // Get the fid form the value or check for a default value.
    if ($header_back) {
      $fid = $header_back[0]['fid'];
    }
    else {
      $ct = $node->type;
      $fid = variable_get('dt_header_background_' . $ct, FALSE);
      if (!$fid) {
        $fid = variable_get('dt_header_background_default', FALSE);
      }
    }

    // Fid might be still unexistent.
    if ($fid) {
      // Set a variable available in the tpls.
      $variables['header_back'] = TRUE;
      $dir = 'public://css/header-backgrounds/';
      // Add the css to the page.
      $uri = $dir . 'header_background_' . $fid . '.css';
      drupal_add_css($uri, array('group' => CSS_THEME, 'every_page' => FALSE));
    }
  }
}

/**
 * Implements hook_workbench_moderation_transition().
 */
function dt_header_background_workbench_moderation_transition($node) {
  // Create the Entity wrapper and handle the header background image.
  $entity_wrapper = entity_metadata_wrapper('node', $node);
  if (isset($node->field_core_header_image)
    && NULL !== $entity_wrapper->field_core_header_image->value()) {
    _dt_header_background_handle_header_background($entity_wrapper);
  }
}

/**
 * Set the default header background image.
 */
function _dt_header_background_set_default_header_background($ct = FALSE, $fid = FALSE) {
  // We receive the fid only on a theme setting form submit.
  if (!$fid) {
    // Set the "default" image for the header background.
    $filepath = drupal_realpath(drupal_get_path('module', 'dt_header_background') . '/images/header_background_default.png');

    if (file_exists($filepath)) {
      $file = (object) array(
        'uid' => 1,
        'uri' => $filepath,
        'filemime' => file_get_mimetype($filepath),
        'status' => FILE_STATUS_PERMANENT,
      );

      // Copy the default image in the public folder.
      $file = file_copy($file, 'public://');
      $fid = $file->fid;
      file_usage_add($file, 'dt_header_background', 'default', 1);
    }
  }

  // Setting a variable containing the file id.
  variable_set('dt_header_background_' . $ct, $fid);
  // Prepare and store the css file.
  _dt_header_background_handle_header_background(NULL, $fid);
}

/**
 * Helper function to generate css files for the header background.
 */
function _dt_header_background_handle_header_background($entity_wrapper = NULL, $fid = FALSE) {
  if (!$fid) {
    // We need the file id.
    $fid = $entity_wrapper->field_core_header_image->value()['fid'];
  }
  // Load the managed file.
  $file = file_load($fid);
  // We want to store those css files in a specific path.
  $dir = 'public://css/header-backgrounds/';
  // Build the uri for our css file.
  $uri = $dir . 'header_background_' . $fid . '.css';
  // Get the real path basing on the uri.
  $filepath = drupal_realpath($uri);

  // If we already a this file no reasons to go further.
  if (!file_exists($filepath)) {
    // Prepare the filesystem.
    file_prepare_directory($dir, FILE_CREATE_DIRECTORY);
    // Get all the breakpoints belonging to "this" theme.
    $breakpoints = breakpoints_breakpoint_load_all_theme('europa');
    // Need to reverse the order of the breakpoint, mobile first.
    $breakpoints = array_reverse($breakpoints);
    // Get all the images presets.
    $styles = image_styles();
    // Get the presets name.
    $style_names = array_keys($styles);
    // Filter the ones regarding the header image.
    $header_styles = preg_grep('#^header_image*#', $style_names);
    // Prepare containers.
    $mapping = array();
    $css = '';

    foreach ($breakpoints as $breakpoint) {
      $name = $breakpoint->machine_name;
      // Get the key to find correspondencies in the image presets.
      $breakpoint_key = substr($name, strrpos($name, '.') + 1);
      // Get the styles related to this breakpoint.
      $style_names_breakpoint = preg_grep('#' . $breakpoint_key . '#', $header_styles);
      if (!empty($style_names_breakpoint)) {
        // We base on the multiplier.
        sort($style_names_breakpoint);
        foreach ($style_names_breakpoint as $style_name) {
          // Build an array mapping the breakpoints media queries and the
          // image url.
          $mapping[$breakpoints[$name]->breakpoint][] = image_style_url($style_name, $file->uri);
        }
      }
      // Create the css rules for each breakpoint.
      $css .= '@media ' . $breakpoints[$name]->breakpoint . ' {' . PHP_EOL;
      $css .= ' .page-header--image {' . PHP_EOL;
      $css .= '   background-image: url("' . $mapping[$breakpoints[$name]->breakpoint][0] . '");' . PHP_EOL;
      $css .= ' }' . PHP_EOL;
      $css .= '}' . PHP_EOL;
      $css .= PHP_EOL;

      // High resolution displays.
      $css .= '@media ' . $breakpoints[$name]->breakpoint . ', (-webkit-min-device-pixel-ratio: 2), (min--moz-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 2/1), (min-device-pixel-ratio: 2),(min-resolution: 2dppx)  {' . PHP_EOL;
      $css .= ' .page-header--image {' . PHP_EOL;
      $css .= '   background-image: url("' . $mapping[$breakpoints[$name]->breakpoint][1] . '");' . PHP_EOL;
      $css .= ' }' . PHP_EOL;
      $css .= '}' . PHP_EOL;
      $css .= PHP_EOL;
    }
    // Save the file.
    file_unmanaged_save_data($css, $uri, FILE_EXISTS_REPLACE);
  }
}

/**
 * Implements hook_file_delete().
 */
function dt_header_background_file_delete($file) {
  $fid = $file->fid;
  $uri = 'public://css/header-backgrounds/';
  $file = drupal_realpath($uri) . '/header_background_' . $fid . '.css';
  if (file_exists($file)) {
    unlink($file);
  }
}

/**
 * Implements hook_form_alter().
 */
function dt_header_background_form_alter(&$form, &$form_state) {
  if ($form['#form_id'] == 'system_theme_settings') {
    // Save the current value for the background image if any.
    $header_background = variable_get('dt_header_background_default', FALSE);

    if ($header_background) {
      $form_state['storage']['dt_header_background_default'] = $header_background;
    }

    // Check the value for the overrides.
    $overrides = variable_get('dt_header_background_per_content_type', FALSE);

    // Header Background.
    $form['header'] = array(
      '#type' => 'fieldset',
      '#title' => t('Header background'),
      '#group' => 'europa',
    );

    $form['header']['dt_header_background_default'] = array(
      '#type' => 'managed_file',
      '#title' => t('Default image for the header background'),
      '#upload_validators' => array(
        'file_validate_is_image' => array(),
        'file_validate_extensions' => array('png jpg jpeg gif'),
        'file_validate_image_resolution' => array('0', '2400x900'),
      ),
      '#progress_message' => t('Uploading the image'),
      '#progress_indicator' => 'throbber',
      '#default_value' => variable_get('dt_header_background_default', FALSE),
      '#required' => FALSE,
      '#upload_location' => 'public://',
      '#weight' => 0,
      '#theme' => 'theme_image_widget',
      '#description' => t('Upload a file, allowed extensions: jpg, jpeg, png, gif. Minimal image size is 2400x900px'),
    );

    $form['header']['per_content_type'] = array(
      '#type' => 'checkbox',
      '#title' => t('Would you like to be able to override the default value on a content type basis?'),
      '#default_value' => variable_get('dt_header_background_per_content_type', FALSE),
    );

    $form['header']['overrides'] = array(
      '#type' => 'fieldset',
      '#prefix' => '<div id="dt_header_background_overrides">',
      '#suffix' => '</div>',
      '#states' => array(
        'visible' => array(
          ':input[name="per_content_type"]' => array('checked' => TRUE),
        ),
      ),
    );

    dt_header_background_per_content_type($form, $form_state);

    $form['#submit'][] = "_dt_header_background_theme_settings_submit";
  }
}

function dt_header_background_per_content_type(&$form, &$form_state) {
  // Get a list of the existing content type.
  $content_types = node_type_get_types();
  $i = 1;
  foreach ($content_types as $machine_name => $content_type) {
    if (field_info_instance('node', 'field_core_header_image', $machine_name) !== NULL) {
      $form['header']['overrides']['dt_header_background_' . $machine_name] = array(
        '#type' => 'managed_file',
        '#title' => t('Default image for the header background for the %ct content type', array('%ct' => $content_type->name)),
        '#upload_validators' => array(
          'file_validate_is_image' => array(),
          'file_validate_extensions' => array('png jpg jpeg gif'),
          'file_validate_image_resolution' => array('0', '2400x900'),
        ),
        '#progress_message' => t('Uploading the image'),
        '#progress_indicator' => 'throbber',
        '#default_value' => variable_get('dt_header_background_' . $machine_name, FALSE),
        '#required' => FALSE,
        '#upload_location' => 'public://',
        '#weight' => $i,
        '#theme' => 'theme_image_widget',
        '#description' => t('Upload a file, allowed extensions: jpg, jpeg, png, gif. Minimal image size is 2400x900px'),
      );

      $i++;
    }
  }

  $form_state['rebuild'] = TRUE;
  return $form['header']['overrides'];
}

/**
 * Custom submit function for the theme setting form.
 */
function _dt_header_background_theme_settings_submit(&$form, &$form_state) {
  // Relevant inputs.
  $keys = preg_grep('#dt_header_background_(.*?)#', array_keys($form_state['values']));

  foreach ($keys as $key) {
    $ct = str_replace('dt_header_background_', '', $key);
    // User uploaded a new image or there is already a value.
    $fids[$ct] = $form_state['values'][$key] == 0 ? FALSE : $form_state['values'][$key];
    // We store the previous value to be able to delete the css file.
    $prevs[$ct] = isset($form_state['storage'][$key]) ? $form_state['storage'][$key] : FALSE;
  }

  // If there is a value and it changed in this submission, prepare everything.
  foreach ($fids as $ct => $fid) {
    if ($fid) {
      if ($fids[$ct] != $prevs[$ct]) {
        _dt_header_background_set_default_header_background($ct, $fid);
      }
    }
    // There's no default header background.
    else {
      // Let's check if it has been removed in this submission.
      if ($prevs[$ct]) {
        $file = new stdClass();
        $file->fid = $prevs[$ct];
        dt_header_background_file_delete($file);
        file_usage_delete($file, 'dt_header_background');
        variable_del($key);
      }
    }
  }

  if ($form_state['values']['per_content_type'] == 1) {
    variable_set('dt_header_background_per_content_type', 1);
  }
}
