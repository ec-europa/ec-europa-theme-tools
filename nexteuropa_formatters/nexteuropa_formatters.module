<?php

/**
 * @file
 * nexteuropa_formatters.module
 */

require_once 'nexteuropa_formatters.field.inc';
require_once 'nexteuropa_formatters.field_group.inc';

/**
 * Implements hook_theme_registry_alter().
 */
function nexteuropa_formatters_theme_registry_alter(&$registry) {
  $registry['field']['function'] = 'nexteuropa_formatters_theme_field_override';
}

/**
 * Implements hook_theme().
 */
function nexteuropa_formatters_theme($existing, $type, $theme, $path) {
  return [
    'nexteuropa_bem_item_list' => [
      'file' => 'nexteuropa_formatters.theme.inc',
      'variables' => [
        'items' => [],
        'modifiers' => [],
        'type' => 'div',
        'attributes' => [],
      ],
    ],
    'nexteuropa_file_translations' => [
      'file' => 'nexteuropa_formatters.theme.inc',
      'variables' => [
        'files' => [],
      ],
    ],
  ];
}

/**
 * Helper function to return the context nav prefix.
 *
 * @param string $label
 *   The label to be used in the prefix.
 * @param bool $add_expander
 *   If we should add the expander.
 * @param int $trim_at
 *   From which element to trim.
 * @param int $trim_to
 *   To what element to trim.
 *
 * @return array
 *   #prefix and #suffix element for the render object.
 */
function _nexteuropa_formatters_get_context_nav_wrapper($label, $add_expander = FALSE, $trim_at = 0, $trim_to = 0) {
  $extra_classes = '';
  $data_attribute = '';

  if ($add_expander && $trim_at > 0 && $trim_to > 0) {
    $extra_classes = ' has-expander';
    $data_attribute = 'data-trimat="' . $trim_at . '"';
    $data_attribute .= ' data-trimto="' . $trim_to . '"';
  }
  return [
    '#prefix' => '<span class="context-nav__label">' . $label . '</span><div ' . $data_attribute . ' class="context-nav__items' . $extra_classes . '">',
    '#suffix' => '</div>',
  ];
}

/**
 * Custom theme overriding function.
 *
 * @see nexteuropa_formatters_theme_registry_alter()
 */
function nexteuropa_formatters_theme_field_override($variables) {
  $element = $variables['element'];
  $field_type = isset($element['#field_type']) ? $element['#field_type'] : NULL;

  switch ($field_type) {
    case 'entityreference':
      if (_nexteuropa_formatters_is_entityreference($element['#formatter'])) {
        // First node from entity reference.
        $reference = '';
        if (isset($element[0])) {
          $reference = array_shift($element[0]);
        }
        $first_node = is_array($reference) ? array_shift($reference) : NULL;
        $layout_name = isset($variables['nexteuropa_listing_columns']) ? $variables['nexteuropa_listing_columns'] : FALSE;
        $layout_name_clean = str_replace('_', '-', $layout_name);

        $settings = [];
        $settings['view_mode'] = $first_node['#view_mode'];
        $settings['layout'] = $layout_name_clean;
        $settings['modifier'] = isset($variables['nexteuropa_listing_modifier']) ? $variables['nexteuropa_listing_modifier'] : '';
        $settings['wrapper_modifier'] = isset($variables['nexteuropa_listing_wrapper_modifier']) ? $variables['nexteuropa_listing_wrapper_modifier'] : '';
        $settings['item_modifier'] = isset($variables['nexteuropa_listing_item_modifier']) ? $variables['nexteuropa_listing_item_modifier'] : '';

        // Custom listing settings based on view mode.
        if (isset($first_node['#view_mode']) && in_array($first_node['#view_mode'], _nexteuropa_formatters_get_listing_view_modes())) {
          switch ($first_node['#view_mode']) {
            case 'title':
              $settings['modifier'] .= ' listing--title';
              $settings['wrapper_modifier'] .= ' listing--title__wrapper';
              $settings['listing_wrapper_element'] = 'ul';
              $settings['item_wrapper_element'] = 'li';
              break;

            case 'meta':
              $settings['modifier'] .= ' listing--meta';
              $settings['wrapper_modifier'] .= ' listing--meta__wrapper';
              break;

            default:
              $settings['modifier'] .= ' listing--teaser';
              $settings['wrapper_modifier'] .= ' listing--teaser__wrapper';
              break;
          }

          return _nexteuropa_formatters_field_component_listing($variables, $settings);
        }
      }
      break;

  }

  if (isset($element['#formatter'])) {
    // Handling nexteuropa_formatters custom cases.
    switch ($element['#formatter']) {
      case 'context_nav_item':
      case 'listing_title':
        $output = '';

        // Render the items.
        foreach ($variables['items'] as $item) {
          $output .= drupal_render($item);
        }
        return $output;

      case 'nexteuropa_tags':
        $output = '<div class="tags">';
        // Label formatting.
        if (!$variables['label_hidden']) {
          $output .= '<div class="tags__label"' . $variables['title_attributes'] . '>' . $variables['label'] . '</div>';
        }
        // Items list formatting.
        $output .= '<div class="tags__items"' . $variables['content_attributes'] . '>';
        foreach ($variables['items'] as $item) {
          $output .= drupal_render($item);
        }
        // Closing both tags and tags__items.
        $output .= '</div></div>';
        return $output;

    }
  }

  // Handling default output following BEM syntax.
  $output = '';
  $items_number = count($variables['items']);

  // Render the label, if it's not hidden.
  if (!$variables['label_hidden']) {
    $label_classes = 'field__label';
    if ($variables['element']['#label_display'] == 'above') {
      $label_classes .= ' field__label--above';
    }

    $output .= '<div class="' . $label_classes . '"' . $variables['title_attributes'] . '>' . $variables['label'] . '</div>';
  }

  // Render the items.
  if ($element['#view_mode'] == 'title') {
    foreach ($variables['items'] as $item) {
      $output .= drupal_render($item);
    }
  }
  else {
    $output .= '<div class="field__items"' . $variables['content_attributes'] . '>';
    $i = 1;

    foreach ($variables['items'] as $item) {
      // We should pass along the parent object if we have access to it.
      if (isset($item['#file']) && isset($element['#object'])) {
        $item['#file']->entity = $element['#object'];
      }
      // Comma separated list, applied to the "Label" formatter of er.
      if (isset($element['#formatter']) && $element['#formatter'] == "entityreference_label" && $i < $items_number) {
        $item['#suffix'] = ', ';
      }

      $i++;
      $output .= drupal_render($item);
    }

    $output .= '</div>';

    // Removing classes related to label and field type that we will never use.
    if (!empty($variables['classes_array'])) {
      $variables['classes_array'] = array_filter($variables['classes_array'], function($value) {
        return ((strstr($value, 'field-type') == TRUE || strstr($value, 'field-label') == TRUE) ? FALSE : TRUE);
      });
    }

    /*
     * @todo DTTSB-1671 Remove invalid field modifier.
     */
    // Render the top-level DIV.
    $output = '<div ' . $variables['attributes'] . ' class="' . implode(' ', $variables['classes_array']) . ' field--' . strtr($element['#field_name'], '_', '-') . '">' . $output . '</div>';
  }

  return $output;
}

/**
 * Helper function for display listings.
 *
 * @param array $variables
 *   The element variable coming from the parent function.
 * @param array $config
 *   The configuration parameters.
 *
 * @return string
 *   The markup as a string.
 */
function _nexteuropa_formatters_field_component_listing($variables, $config) {
  $config += [
    'modifier' => 'default',
    'wrapper_modifier' => '',
    'layout' => 'default',
    'listing_wrapper_element' => 'ul',
    'item_wrapper_element' => 'li',
  ];

  $modifier_class = ' ' . trim($config['modifier']);
  $wrapper_class = $config['modifier'] == 'default' ? '' : ' listing__wrapper--' . $config['layout'];
  $wrapper_class .= ' ' . trim($config['wrapper_modifier']);
  $item_class = "listing__item";
  $item_class .= !empty($config['item_modifier']) ? ' ' . trim($config['item_modifier']) : '';

  $columns_num = 1;
  if ($config['layout'] == 'two-columns') {
    $columns_num = 2;
  }
  elseif ($config['layout'] == 'three-columns') {
    $columns_num = 3;
  }

  // Distribute them into columns.
  $total = count($variables['items']);
  $columns = [];
  $max_items_in_column = [];

  for ($i = 0; $i < $columns_num; $i++) {
    $max_items_in_column[] = floor(($total + $columns_num - ($i + 1)) / $columns_num);
  }

  $counter = 0;
  for ($i = 0; $i < $columns_num; $i++) {
    for ($j = 0; $j < $max_items_in_column[$i]; $j++) {
      $item = $variables['items'][$counter];
      // Row content.
      switch ($config['view_mode']) {
        case 'title':
          $rendered_item = '' . drupal_render($item) . '';
          break;

        default:
          $rendered_item = drupal_render($item);
          break;
      }
      $columns[$i][] = '<' . $config['item_wrapper_element'] . ' class="' . $item_class . '">' . $rendered_item . '</' . $config['item_wrapper_element'] . '>';
      $counter++;
    }
  }

  // Assemble the markup.
  $output = '<div class="listing__wrapper' . $wrapper_class . '">';
  foreach ($columns as $column) {
    $output .= '<' . $config['listing_wrapper_element'] . ' class="listing' . $modifier_class . '">';

    // Loop over all our items.
    foreach ($column as $item) {
      // Add the actual item.
      $output .= $item;
    }

    $output .= '</' . $config['listing_wrapper_element'] . '>';
  }
  $output .= '</div>';

  return $output;
}

/**
 * Implements hook_ds_field_theme_functions_settings_form_alter().
 *
 * This will add an extra setting to the field formatter so that we can add an
 * extra class.
 */
function nexteuropa_formatters_ds_field_theme_functions_settings_form_alter_alter(&$form, $field_settings) {
  $form['ft']['meta_modifier'] = [
    '#title' => 'Meta item modifier',
    '#type' => 'select',
    '#empty_option' => 'No modifier',
    '#empty_value' => '',
    '#options' => [
      'meta__item--type' => 'type (meta__item--type)',
    ],
    '#default_value' => isset($field_settings['meta_modifier']) ? $field_settings['meta_modifier'] : 'meta__item--type',
    '#description' => t('Select the modifier to use for the item. This modifier applies to each sub element.'),
    '#states' => [
      'visible' => [
        ':input[name$="[ft][func]"]' => [
          'value' => 'theme_ds_field_nexteuropa_formatters_meta_item',
        ],
      ],
    ],
  ];

  $form['ft']['listing_title_link'] = [
    '#title' => 'Link',
    '#type' => 'checkbox',
    '#default_value' => isset($field_settings['listing_title_link']) ? 1 : FALSE,
    '#description' => t('Select if you want a a link for this field'),
    '#states' => [
      'visible' => [
        ':input[name$="[ft][func]"]' => [
          'value' => 'theme_ds_field_nexteuropa_formatters_listing_title',
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_module_implements_alter().
 *
 * We need to modify the weight of our alter, to be done after the ds_extra
 * as ds_extra always initializes an empty array (by design).
 */
function nexteuropa_formatters_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'ds_field_settings_alter') {
    $group = $implementations['nexteuropa_formatters'];
    unset($implementations['nexteuropa_formatters']);
    $implementations['nexteuropa_formatters'] = $group;
  }
}

/**
 * Implements hook_ds_field_settings_alter().
 *
 * This will be triggered after a view mode form has been submitted. It will
 * make sure that our custom settings are stored in the $field_settings array.
 */
function nexteuropa_formatters_ds_field_settings_alter(&$field_settings, $form, &$form_state) {
  if (!empty($form_state['formatter_settings'])) {
    foreach ($form_state['formatter_settings'] as $field => $setting) {
      if (isset($form_state['formatter_settings'][$field]['ft']['func'])) {
        if ($form_state['formatter_settings'][$field]['ft']['func'] == 'theme_ds_field_nexteuropa_formatters_meta_item') {
          $field_settings[$field]['formatter_settings']['ft']['meta_modifier'] = $form_state['formatter_settings'][$field]['ft']['meta_modifier'];
        }
        elseif ($form_state['formatter_settings'][$field]['ft']['func'] == 'theme_ds_field_nexteuropa_formatters_listing_title') {
          $field_settings[$field]['formatter_settings']['ft']['listing_title_link'] = $form_state['formatter_settings'][$field]['ft']['listing_title_link'];
        }
      }
    }
  }
}

/**
 * This is a basic theme_ds_field implementation.
 *
 * It's name is required to start with theme_ds_field and is defined in
 * nexteuropa_formatters_ds_field_theme_functions_info. It will modify the
 * output of the field before it is passed to the render function.
 *
 * This will only be called for our meta_item setting.
 *
 * @param array $variables
 *   The array containing information for the field.
 *
 * @return string
 *   The rendered output.
 */
function theme_ds_field_nexteuropa_formatters_meta_item($variables) {
  // Default classes.
  $classes = ['meta__item'];

  // Check if we have extra classes.
  if ($variables['ds-config']['meta_modifier']) {
    $classes = array_merge($classes, explode(' ', $variables['ds-config']['meta_modifier']));
  }

  // Our default render array.
  $subrender = [
    '#prefix' => '<span class="' . implode(' ', $classes) . '">',
    '#suffix' => '</span>',
  ];

  // Build the output.
  $output = '';
  foreach ($variables['items'] as $item) {
    $item_render = $subrender + ['#markup' => drupal_render($item)];
    $output .= drupal_render($item_render);
  }

  return $output;
}

/**
 * This is a basic theme_ds_field implementation.
 *
 * @param array $variables
 *   The array containing information for the field.
 *
 * @return string
 *   The rendered output.
 */
function theme_ds_field_nexteuropa_formatters_listing_title($variables) {
  // Default classes.
  $classes = ['listing__title'];
  $entity_type = $variables['element']['#entity_type'];

  // Our default render array.
  $subrender = [
    '#prefix' => '<h3 class="' . implode(' ', $classes) . '">',
    '#suffix' => '</h3>',
  ];

  // Build the output.
  $output = '';
  foreach ($variables['items'] as $item) {
    if ($variables['ds-config']['listing_title_link']) {
      $uri = entity_uri($entity_type, $variables['element']['#object']);
      $path = url($uri['path']);
      $item['#markup'] = l(strip_tags($item['#markup']), $path);
    }

    $item_render = $subrender + ['#markup' => drupal_render($item)];
    $output .= drupal_render($item_render);
  }

  return $output;
}

/**
 * This is a basic theme_ds_field implementation.
 *
 * It's name is required to start with theme_ds_field and is defined in
 * nexteuropa_formatters_ds_field_theme_functions_info. It will modify the
 * output of the field before it is passed to the render function.
 *
 * This will only be called for our section_item setting.
 *
 * @param array $variables
 *   The array containing information for the field.
 *
 * @return string
 *   The rendered output.
 */
function theme_ds_field_nexteuropa_formatters_section_item($variables) {
  // Default classes.
  $classes = ['section__group', 'section--row-three', 'section--navigation'];

  // Check if we have extra classes.
  if (isset($variables['ds-config']['meta_modifier']) && $variables['ds-config']['meta_modifier']) {
    $classes = array_merge($classes, explode(' ', ['ds-config']['meta_modifier']));
  }

  // Our default render array.
  $item_wrapper = [
    '#prefix' => '<div class="section__item">',
    '#suffix' => '</div>',
  ];

  // Build the output.
  $output = '';
  foreach ($variables['items'] as $item) {
    $item_render = $item_wrapper + ['#markup' => drupal_render($item)];
    $output .= drupal_render($item_render);
  }

  $main_wrapper = [
    '#markup' => $output,
    '#prefix' => '<div class="section"><div class="' . implode(' ', $classes) . '">',
    '#suffix' => '</div></div>',
  ];

  return drupal_render($main_wrapper);
}

/**
 * This is a basic theme_ds_field implementation.
 *
 * It's name is required to start with theme_ds_field and is defined in
 * nexteuropa_formatters_ds_field_theme_functions_info. It will modify the
 * output of the field before it is passed to the render function.
 *
 * This will only be called for our h4label setting.
 *
 * @param array $variables
 *   The array containing information for the field.
 *
 * @return string
 *   The rendered output.
 */
function theme_ds_field_nexteuropa_formatters_h4label_item($variables) {
  // Handling default output following BEM syntax.
  $output = '';

  // Render the label, if it's not hidden.
  if (!$variables['label_hidden']) {
    $output .= '<div class="field__label"' . $variables['title_attributes'] . '><h4>' . $variables['label'] . '</h4></div>';
  }

  // Render the items.
  if ($variables['element']['#view_mode'] == 'title') {
    foreach ($variables['items'] as $item) {
      $output .= drupal_render($item);
    }
  }
  else {
    $output .= '<div class="field__items"' . $variables['content_attributes'] . '>';
    foreach ($variables['items'] as $item) {
      // We should pass along the parent object if we have access to it.
      if (isset($item['#file']) && isset($variables['element']['#object'])) {
        $item['#file']->entity = $variables['element']['#object'];
      }
      $output .= drupal_render($item);
    }
    $output .= '</div>';

    /*
     * @todo DTTSB-1671 Remove invalid field modifier.
     */
    // Render the top-level DIV.
    $output = '<div ' . $variables['attributes'] . ' class="' . implode(' ', $variables['classes_array']) . ' field--' . strtr($variables['element']['#field_name'], '_', '-') . '">' . $output . '</div>';
  }

  return $output;
}

/**
 * Theming function for context nav items.
 *
 * @param array $variables
 *   The array containing information for the field.
 *
 * @return string
 *   The rendered output.
 */
function theme_ds_field_nexteuropa_formatters_context_nav_item($variables) {
  $field = $variables['element'];
  $elements_rendered = '';

  $skeleton = _nexteuropa_formatters_get_context_nav_wrapper($field['#title']);

  foreach ($field['#items'] as $element) {
    $value = $element['value'];

    $element = [
      '#prefix' => '<span class="context-nav__item">',
      '#markup' => $value,
      '#suffix' => '</span>',
    ];

    $elements_rendered .= drupal_render($element);
  }

  $skeleton['#markup'] = $elements_rendered;

  return drupal_render($skeleton);
}

/**
 * Implements hook_ds_field_theme_functions_info().
 *
 * Adds a new select option.
 */
function nexteuropa_formatters_ds_field_theme_functions_info() {
  return [
    'theme_ds_field_nexteuropa_formatters_listing_title' => t('Nexteuropa: Listing title (h3)'),
    'theme_ds_field_nexteuropa_formatters_meta_item' => t('Nexteuropa: Meta item'),
    'theme_ds_field_nexteuropa_formatters_section_item' => t('Nexteuropa: Section item (4/4/4)'),
    'theme_ds_field_nexteuropa_formatters_h4label_item' => t('Nexteuropa: Field Label H4 item'),
    'theme_ds_field_nexteuropa_formatters_context_nav_item' => t('Nexteuropa: Contextual nav item'),
  ];
}

/**
 * Helper for providing markup to file component.
 *
 * @param object $file
 *   File object.
 * @param string $modifier
 *   Class modefier for the file block element.
 * @param bool $subfile
 *   True/False parameter to set if it is a subfile.
 * @param bool $is_external
 *   If the file links to an external resource.
 * @param array $url
 *   Url depending on field type.
 *
 * @return string|NULL
 *   HTML markup. NULL if no url is available.
 */
function _nexteuropa_formatters_file_markup($file, $modifier = NULL, $subfile = FALSE, $is_external = FALSE, $url = []) {
  global $language_content;

  if (empty($url)) {
    if (!$url['path'] = file_create_url($file->uri)) {
      return NULL;
    }
    $url['options'] = [];
  }
  // Define the file icon class.
  $icons_available = ['image', 'audio', 'video'];
  $file_icon_class = in_array($file->type, $icons_available) ? ' icon--' . $file->type : ($modifier == 'file--link' ? ' icon--file-link' : ' icon--file');

  // If we have a modifier, just append it to the class.
  $file_class = (!empty($modifier) ? ' ' . $modifier : '');

  // If the file is internal, we have additional information.
  if (!$is_external) {
    $file_extension = drupal_strtoupper(pathinfo($file->uri, PATHINFO_EXTENSION));
    $file_size = nexteuropa_theme_functions_format_size($file->filesize);
  }

  // Get our full language string.
  if (isset($file->entity->language) || isset($file->language)) {
    $language_to_use = isset($file->entity->language) ? entity_translation_get_existing_language('node', $file->entity) : $file->language;
    $file_language_string = _nexteuropa_theme_functions_get_language_obj($language_to_use, 'native');
    if (!$subfile && module_exists('locale') && isset($language_content->language)) {
      $file_language_string = locale($file_language_string, NULL, $language_content->language);
    }
  }

  // Init file info array.
  $file_info_parts = [];

  // Add the file size if available.
  if (isset($file_size)) {
    $file_info_parts[] = $file_size;
  }
  // Add the file extension if available.
  if (isset($file_extension)) {
    $file_info_parts[] = $file_extension;
  }

  // Default download button settings.
  $options = [
    'attributes' => [
      'class' => ['btn', 'file__btn'],
      'title' => check_plain($file->filename),
    ],
    'html' => TRUE,
  ];

  // File information and title setter.
  if ($subfile && isset($file_language_string)) {
    $file_info_string = implode(' - ', $file_info_parts);
    $title_string = $file_language_string . ' ' . t('version');

    // Sub file download classes settings.
    $options['attributes']['class'][] = 'btn--condensed';
    $options['attributes']['class'][] = 'is-internal';
  }
  else {
    $file_info_string = isset($file_language_string) ? '<span class="file__content-language">' . $file_language_string . ' </span>' : '';
    $file_info_string .= !empty($file_info_parts) ? '<span class="file__properties">(' . implode(' - ', $file_info_parts) . '</span>)' : '';

    // Use the description as the link text if available.
    if (isset($file->entity)) {
      $file_node = entity_metadata_wrapper('node', $file->entity);
      $title_string = $file_node->title->value();
    }
    else {
      $title_string = !empty($file->description) ? $file->description : $file->filename;
    }

    // Main download button classes settings.
    $options['attributes']['class'][] = 'btn-default';
  }

  if (isset($file->filemime, $file->filesize)) {
    $options['attributes']['type'] = $file->filemime . '; length=' . $file->filesize;
  }

  $file_text = t('Download');
  if (isset($file_extension, $file_size)) {
    $file_text .= '<span class="sr-only">' . $file_extension . ' - ' . $file_size . '</span>';
  }

  // Build the render array.
  $render_array = [
    '#type' => 'markup',
    '#prefix' => '<div class="file' . $file_class . '">',
    '#suffix' => '</div>',
  ];

  $render_array['icon'] = [
    '#markup' => '<span class="file__icon icon' . $file_icon_class . '"></span>',
  ];

  $render_array['file_metadata'] = [
    '#type' => 'markup',
    '#prefix' => '<div class="file__metadata">',
    '#suffix' => '</div>',
  ];

  $render_array['file_metadata']['title'] = [
    '#type' => 'markup',
    '#markup' => $title_string,
    '#prefix' => '<span class="file__title">',
    '#suffix' => '</span>',
  ];

  $render_array['file_metadata']['info'] = [
    '#type' => 'markup',
    '#markup' => $file_info_string,
    '#prefix' => '<div class="file__info">',
    '#suffix' => '</div>',
  ];

  $render_array['button'] = [
    '#type' => 'link',
    '#title' => $file_text,
    '#href' => $url['path'],
    '#options' => array_merge($options, $url['options']),
  ];

  if ($modifier == "file--link") {
    // Reorganize elements to match styleguide.
    $render_array['file_metadata']['#prefix'] = '<div class="file__metadata--link">';
    $render_array['file_metadata']['title']['#prefix'] = '<a class="file__title" href="' . $url['path'] . '">';
    $render_array['file_metadata']['title']['#suffix'] = '</a>';

    unset($render_array['file_metadata']['info']);
    unset($render_array['button']);
  }

  drupal_alter('nexteuropa_formatter_file', $render_array);
  return drupal_render($render_array);
}
