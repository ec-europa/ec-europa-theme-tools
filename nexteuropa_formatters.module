<?php
/**
 * @file
 * nexteuropa_formatters.module
 */

require_once 'nexteuropa_formatters.field.inc';
require_once 'nexteuropa_formatters.field_group.inc';

/**
 * Implements hook_theme_registry_alter().
 */
function nexteuropa_formatters_theme_registry_alter(&$registry) {
  $registry['field']['function'] = 'nexteuropa_formatters_theme_field_override';
}

/**
 * Implements hook_theme().
 */
function nexteuropa_formatters_theme($existing, $type, $theme, $path) {
  return array(
    'nexteuropa_bem_item_list' => array(
      'file' => 'nexteuropa_formatters.theme.inc',
      'variables' => array(
        'items' => array(),
        'modifiers' => array(),
        'type' => 'div',
        'attributes' => array(),
      ),
    ),
    'nexteuropa_file_translations' => array(
      'file' => 'nexteuropa_formatters.theme.inc',
      'variables' => array(
        'files' => array(),
      ),
    ),
  );
}

/**
 * Helper function to return the context nav prefix.
 *
 * @param string $label
 *   The label to be used in the prefix.
 * @param bool $add_expander
 *   If we should add the expander.
 * @param int $trim_at
 *   From which element to trim.
 * @param int $trim_to
 *   To what element to trim.
 *
 * @return array
 *   #prefix and #suffix element for the render object.
 */
function _nexteuropa_formatters_get_context_nav_wrapper($label, $add_expander = FALSE, $trim_at = 0, $trim_to = 0) {
  $extra_classes = '';
  $data_attribute = '';

  if ($add_expander && $trim_at > 0 && $trim_to > 0) {
    $extra_classes = ' has-expander';
    $data_attribute = 'data-trimat="' . $trim_at . '"';
    $data_attribute .= ' data-trimto="' . $trim_to . '"';
  }
  return array(
    '#prefix' => '<span class="context-nav__label">' . $label . '</span><div ' . $data_attribute . ' class="context-nav__items' . $extra_classes . '">',
    '#suffix' => '</div>',
  );
}

/**
 * Custom theme overriding function.
 *
 * @see nexteuropa_formatters_theme_registry_alter()
 */
function nexteuropa_formatters_theme_field_override($variables) {
  $element = $variables['element'];
  $field_type = isset($element['#field_type']) ? $element['#field_type'] : NULL;

  switch ($field_type) {
    case 'entityreference':
      if ($element['#formatter'] == 'entityreference_entity_view') {
        // First node from entity reference.
        $reference = '';
        if (isset($element[0])) {
          $reference = array_shift($element[0]);
        }
        $first_node = is_array($reference) ? array_shift($reference) : NULL;
        $layout_name = isset($variables['nexteuropa_listing_columns']) ? $variables['nexteuropa_listing_columns'] : FALSE;
        $layout_name_clean = str_replace('_', '-', $layout_name);

        $settings = array();
        $settings['view_mode'] = $first_node['#view_mode'];
        $settings['layout'] = $layout_name_clean;
        $settings['modifier'] = isset($variables['nexteuropa_listing_modifier']) ? $variables['nexteuropa_listing_modifier'] : '';
        $settings['wrapper_modifier'] = isset($variables['nexteuropa_listing_wrapper_modifier']) ? $variables['nexteuropa_listing_wrapper_modifier'] : '';
        $settings['item_modifier'] = isset($variables['nexteuropa_listing_item_modifier']) ? $variables['nexteuropa_listing_item_modifier'] : '';

        // Custom listing settings based on view mode.
        $listing_view_modes = array('title', 'meta', 'teaser', 'image_label');
        if (isset($first_node['#view_mode']) && in_array($first_node['#view_mode'], $listing_view_modes)) {
          switch ($first_node['#view_mode']) {
            case 'title':
              $settings['modifier'] .= ' listing--title';
              $settings['wrapper_modifier'] .= ' listing--title__wrapper';
              $settings['listing_wrapper_element'] = 'ul';
              $settings['item_wrapper_element'] = 'li';
              break;

            case 'meta':
              $settings['modifier'] .= ' listing--meta';
              $settings['wrapper_modifier'] .= ' listing--meta__wrapper';
              break;

            case 'teaser':
              $settings['modifier'] .= ' listing--teaser';
              $settings['wrapper_modifier'] .= ' listing--teaser__wrapper';
              break;
          }

          return _nexteuropa_formatters_field_component_listing($variables, $settings);
        }
      }

      break;
  }

  if (isset($element['#formatter'])) {

    // Handling nexteuropa_formatters custom cases.
    switch ($element['#formatter']) {
      case 'context_nav_item':
        $output = '';

        // Render the items.
        foreach ($variables['items'] as $delta => $item) {
          $output .= drupal_render($item);
        }
        return $output;

      case 'nexteuropa_tags':
        $output = '<div class="tags">';
        // Label formatting.
        if (!$variables['label_hidden']) {
          $output .= '<div class="tags__label"' . $variables['title_attributes'] . '>' . $variables['label'] . '</div>';
        }
        // Items list formatting.
        $output .= '<div class="tags__items"' . $variables['content_attributes'] . '>';
        foreach ($variables['items'] as $delta => $item) {
          $output .= drupal_render($item);
        }
        // Closing both tags and tags__items.
        $output .= '</div></div>';
        return $output;

    }
  }

  // Handling default output following BEM syntax.
  $output = '';
  $classes = array();

  // Render the label, if it's not hidden.
  if (!$variables['label_hidden']) {
    $output .= '<div class="field__label"' . $variables['title_attributes'] . '>' . $variables['label'] . '</div>';
    $classes[] = 'field--labeled';
  }

  // Render the items.
  if ($variables['element']['#view_mode'] == 'title') {
    foreach ($variables['items'] as $delta => $item) {
      $output .= drupal_render($item);
    }
  }
  else {
    $output .= '<div class="field__items"' . $variables['content_attributes'] . '>';
    foreach ($variables['items'] as $delta => $item) {
      // We should pass along the parent object if we have access to it.
      if (isset($item['#file']) && isset($variables['element']['#object'])) {
        $item['#file']->entity = $variables['element']['#object'];
      }
      $output .= drupal_render($item);
    }
    $output .= '</div>';

    // Render the top-level DIV.
    $output = '<div ' . $variables['attributes'] . ' class="field field--' . strtr($variables['element']['#field_name'], '_', '-') . ' ' . implode(' ', $classes) . '">' . $output . '</div>';
  }

  return $output;
}

/**
 * Helper function for display listings.
 */
function _nexteuropa_formatters_field_component_listing($variables, $config) {
  $config += array(
    'modifier' => 'default',
    'wrapper_modifier' => '',
    'layout' => 'default',
    'listing_wrapper_element' => 'div',
    'item_wrapper_element' => 'div',
  );

  $modifier_class = ' ' . trim($config['modifier']);
  $wrapper_class = $config['modifier'] == 'default' ? '' : ' listing__wrapper--' . $config['layout'];
  $wrapper_class .= ' ' . trim($config['wrapper_modifier']);
  $item_class = "listing__item";
  $item_class .= !empty($config['item_modifier']) ? ' ' . trim($config['item_modifier']) : '';

  $columns_num = 1;
  if ($config['layout'] == 'two-columns') {
    $columns_num = 2;
  }
  elseif ($config['layout'] == 'three-columns') {
    $columns_num = 3;
  }

  $items_per_row = 1;
  if ($config['layout'] == 'row-two') {
    $items_per_row = 2;
  }
  elseif ($config['layout'] == 'row-three') {
    $items_per_row = 3;
  }

  // Add a new variable that indicates the row structure.
  $is_row = $items_per_row > 1;

  // Distribute them into columns.
  $total = count($variables['items']);
  $columns = array();
  $max_items_in_column = array();

  for ($i = 0; $i < $columns_num; $i++) {
    $max_items_in_column[] = floor(($total + $columns_num - ($i + 1)) / $columns_num);
  }

  $counter = 0;
  for ($i = 0; $i < $columns_num; $i++) {
    for ($j = 0; $j < $max_items_in_column[$i]; $j++) {
      $item = $variables['items'][$counter];
      // Row content.
      switch ($config['view_mode']) {
        case 'title':
          $rendered_item = '' . drupal_render($item) . '';
          break;

        default:
          $rendered_item = drupal_render($item);
          break;
      }
      $columns[$i][] = '<' . $config['item_wrapper_element'] . ' class="' . $item_class . '">' . $rendered_item . '</' . $config['item_wrapper_element'] . '>';
      $counter++;
    }
  }

  // Assemble the markup.
  $output = '<div class="listing__wrapper' . $wrapper_class . '">';
  foreach ($columns as $column) {
    $output .= '<' . $config['listing_wrapper_element'] . ' class="listing' . $modifier_class . '">';

    // Start Itemcounter.
    $item_in_row = 0;

    // Loop over all our items.
    foreach ($column as $key => $item) {

      // In row logic we need to add extra markup.
      if ($is_row) {
        if ($item_in_row == $items_per_row || $item_in_row == 0) {
          $output .= '<div class="clearfix">';
          $item_in_row = 0;
        }
        $item_in_row++;
      }

      // Add the actual item.
      $output .= $item;

      // In row logic we need to add extra markup.
      if ($is_row && ($item_in_row == $items_per_row || count($column) == $key + 1)) {
        $output .= '</div>';
      }
    }

    $output .= '</' . $config['listing_wrapper_element'] . '>';
  }
  $output .= '</div>';

  return $output;
}
